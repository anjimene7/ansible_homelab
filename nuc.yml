---
- name: Setup new Ubuntu Home Server
  hosts: all
  become: true
  vars:
    username: anjimene
    docker_group: docker
    uid_mount: 1001
    gid_mount: 995
    nas_mounts:
      - src: "//192.168.1.126/Data_Storage/Data"
        dst: /media/data_storage
        fstype: cifs
        opts: "nobrl,uid={{ uid_mount }},gid={{ gid_mount }},vers=3.0,file_mode=0770,dir_mode=0770,credentials=/root/.smbcredentials"
      - src: "//192.168.1.126/Data_Storage/Data/Reading"
        dst: /media/reading
        fstype: cifs
        opts: "uid={{ uid_mount }},gid={{ gid_mount }},vers=3.0,file_mode=0770,dir_mode=0770,credentials=/root/.smbcredentials"
      - src: "//192.168.1.126/home"
        dst: /media/anjimene
        fstype: cifs
        opts: "uid={{ uid_mount }},gid={{ gid_mount }},vers=3.0,file_mode=0770,dir_mode=0770,credentials=/root/.smbcredentials"
      - src: "//192.168.1.126/apps"
        dst: /media/apps
        fstype: cifs
        opts: "uid={{ uid_mount }},gid={{ gid_mount }},vers=3.0,file_mode=0770,dir_mode=0770,credentials=/root/.smbcredentials"

  tasks:
    - name: Add repo for mainline
      apt_repository:
        repo: 'ppa:cappelikan/ppa'
        state: present

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Upgrade all apt packages
      become: true
      apt:
        upgrade: dist

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Update apt and install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - git
          - lm-sensors
          - cifs-utils
          - pkexec
          - mainline
          - linux-crashdump
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io

    # sudo groupadd docker
    - name: Create "docker" group
      group:
        name: "{{ docker_group }}"
        state: present

    # sudo usermod -aG docker root
    - name: Add user to "docker" group
      user:
        name: "{{ username }}"
        groups: "{{ docker_group }}"
        append: yes

    - name: download portainer stack.yml
      get_url:
        url: https://downloads.portainer.io/ce2-19/portainer-agent-stack.yml
        dest: /home/{{ username }}/portainer-agent-stack.yml

    - name: Init a new swarm with default parameters
      community.docker.docker_swarm:
        state: present

    - name: Deploy stack from a compose file
      docker_stack:
        state: present
        name: portainer
        compose:
          - /home/{{ username }}/portainer-agent-stack.yml

    - name: Create credential file (used for fstab entry)
      copy:
        content: |
          username={{ username }}
          password={{ PWD_SMB_CREDENTIALS }}
        dest: /root/.smbcredentials
        mode: 0600
      become: true

    - name: create directory if they don't exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /media/data_storage
        - /media/reading
        - /media/anjimene
        - /media/apps
        - "/home/{{ username }}/docker"

    - name: Just force systemd to reread configs
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Add mount to /etc/fstab
      lineinfile:
        path: '/etc/fstab'
        line: "{{ item.src }} {{ item.dst }} {{ item.fstype }} {{ item.opts }}"
      loop: "{{ nas_mounts }}"

    - name: mount all
      command: mount -a
      become: true
